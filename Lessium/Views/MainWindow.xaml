<Window x:Class="Lessium.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:prism="http://prismlibrary.com/"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:converters="clr-namespace:Lessium.Converters"
        xmlns:controls="clr-namespace:Lessium.ContentControls"
        xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        prism:ViewModelLocator.AutoWireViewModel="True"
        Width="1024" Height="768" Title="{Binding Title}" WindowStartupLocation="CenterScreen">
    
    <Window.Resources>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <converters:BooleanAndConverter x:Key="BooleanAndConverter" />
        <converters:NotNullConverter x:Key="NotNullConverter" />
        <ControlTemplate x:Key="AddSectionButton" TargetType="Button">
            <Border Opacity="80" Background="LightSteelBlue"
                    HorizontalAlignment="Stretch" Height="Auto">
                <StackPanel Orientation="Horizontal">
                    <Image x:Name="plusIcon" Source="{StaticResource ResourceKey=PlusIcon}" Margin="5,5,5,5"/>
                    <TextBlock x:Name="addSection" Text="{Binding AddSectionText}" VerticalAlignment="Center" HorizontalAlignment="Center" Padding="20,0,20,0"/>
                </StackPanel>
            </Border>
        </ControlTemplate>
    </Window.Resources>

    <Grid>
        
        <!-- Rows (percentage space) -->
        <Grid.RowDefinitions>
            <RowDefinition Height="5*"/> <!-- UI above content -->
            <RowDefinition Height="95*"/> <!-- Content (materials/tests) -->
        </Grid.RowDefinitions>

        <!-- Columns (percentage space) -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20*"/> <!-- Content sections -->
            <ColumnDefinition Width="80*"/> <!-- Content, settings, pages -->
        </Grid.ColumnDefinitions>
        
        <!-- Row 0 - Menu, UI above content -->

        <Menu Name="LessonMenu" HorizontalAlignment="Left" VerticalAlignment="Top">
            <MenuItem Width="40" Height="25" Header="{Binding LessonHeader}">
                <MenuItem Header="{Binding EditHeader}" Command="{Binding Lesson_Edit}"/>
                <MenuItem Header="{Binding UndoChangesHeader}" Command="{Binding Lesson_UndoChanges}" />
                <Separator />
                <MenuItem Header="{Binding RecentHeader}" />
                <Separator />
                <MenuItem Header="{Binding NewLessonHeader}" Command="{Binding Lesson_New}" />
                <!-- There's no need to do checks for IsEnabled, because Command already handles it. -->
                <MenuItem Header="{Binding SaveLessonHeader}" Command="{Binding Lesson_Save}" />
                <MenuItem Header="{Binding LoadLessonHeader}" />
                <MenuItem Header="{Binding CloseLessonHeader}" />
                <Separator />
                <MenuItem Header="{Binding PrintLessonHeader}" />
                <Separator />
                <MenuItem Header="{Binding ExitHeader}" />
            </MenuItem>
        </Menu>

        <!-- Settings, child window OnClick. TODO: Add credits to Settings -->

        <Button Content="{StaticResource ResourceKey=SettingsIcon}"
                Grid.Column="1" Width="32" Height="25"
                HorizontalAlignment="Right" VerticalAlignment="Top">
            <!-- Same size as Menu Header -->

        </Button>

        <!-- 1 Row - Tabs and Content -->

        <TabControl Name="Tabs" Grid.Row="1" Grid.ColumnSpan="2"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Margin="10,0,10,10">

            <!-- Material -->
            <TabItem Name="MaterialHeader" Header="{Binding MaterialHeader}" >
                
                <!-- Interaction -->

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus">
                        <i:InvokeCommandAction Command="{Binding OnTabChanged}" CommandParameter="Materials"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

            </TabItem>

            <!-- Tests -->
            <TabItem Name="TestsHeader" Header="{Binding TestsHeader}">
                
                <!-- Interaction -->
                
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus">
                        <i:InvokeCommandAction Command="{Binding OnTabChanged}" CommandParameter="Tests"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                
            </TabItem>

        </TabControl>

        <!-- Border serves as separator of Sections and (selected) Section content 
             Also used as container for Sections and AddSectionButton -->
        <Border BorderThickness="1" BorderBrush="DarkGray"
            Grid.Row="1" Margin="11,22,0,11"
            HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
            <StackPanel Orientation="Vertical">
                <!-- Sections Headers -->
                <ListBox x:Name="Sections" BorderThickness="0" HorizontalAlignment="Stretch"
                         ItemsSource="{Binding Sections}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Path=Key}" />
                        </DataTemplate>
                    </ListBox.ItemTemplate>

                    <ListBox.Style>
                        <Style TargetType="{x:Type ListBox}">
                            <Style.Triggers>
                                <Trigger Property="HasItems" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ListBox.Style>

                </ListBox>

                <!-- Add Section -->

                <Button Template="{StaticResource AddSectionButton}" VerticalAlignment="Top" Height="25"
                        Command="{Binding AddSection}">

                </Button>
            </StackPanel>
        </Border>

        <!-- Section's Content -->

        <ItemsControl x:Name="SectionContent" HorizontalAlignment="Left" BorderThickness="0"
                      Grid.Row="1" Grid.Column="1">

            <!-- Style enables binding only if current section isn't empty -->
            <ItemsControl.Style>
                <Style TargetType="{x:Type ItemsControl}">

                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CurrentSection, Converter={StaticResource NotNullConverter}}">
                            <!-- Code never reach here -->
                            <DataTrigger.Setters>
                                <Setter Property="ItemsSource" Value="{Binding wtf, diag:PresentationTraceSources.TraceLevel=High}" />
                            </DataTrigger.Setters>
                            <!--<Setter Property="BorderBrush" Value="Aqua" />
                            <Setter Property="BorderThickness" Value="10" />
                            <Setter Property="Width" Value="200"/>
                            <Setter Property="Height" Value="100"/>
                            <Setter Property="Grid.Row" Value="0"/>
                            <Setter Property="Grid.Column" Value="0"/>
                            <Setter Property="Tag" Value="lul"/>-->
                            <!--<Setter Property="ItemsSource" Value="{Binding CurrentSectionItems, diag:PresentationTraceSources.TraceLevel=High}"/>-->
                        </DataTrigger>
                    </Style.Triggers>

                </Style>


            </ItemsControl.Style>

            <!--<ItemsControl.ItemTemplate>
                <DataTemplate>
                    <ContentPresenter x:Name="SectionPresenter" Content="{Binding Value.Items}" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>-->

        </ItemsControl>

        <!-- Pages -->

        <Border BorderBrush="Black" BorderThickness="1"
                Width="Auto" Height="15" Grid.Row="1" Grid.Column="1" Margin="11"
                HorizontalAlignment="Right" VerticalAlignment="Bottom">
            <TextBlock Text="1/1" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
        </Border>

    </Grid>
</Window>
